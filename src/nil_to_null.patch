diff --git a/src/perf.c b/src/perf.c
index 19f9fc5..52e3f26 100644
--- a/src/perf.c
+++ b/src/perf.c
@@ -28,8 +28,7 @@ SGLIB_DEFINE_RBTREE_FUNCTIONS(
 int
 main(void)
 {
-    node_t* tree;
-    my_tree_init(&tree);
+    node_t* tree = NULL;
     node_t* node;
     clock_t start, end;
     double cpu_time_used = 0.1;
diff --git a/src/rbtree.rg.h b/src/rbtree.rg.h
index 9e41308..d9bfe5f 100644
--- a/src/rbtree.rg.h
+++ b/src/rbtree.rg.h
@@ -93,7 +93,6 @@
 //
 //    .. code-block:: cpp
 //
-//       my_tree_init(&tree);
 //       my_node_init(node);
 //
 //    There is also a short if you know your are going to use all standard
@@ -106,7 +105,6 @@
 //
 //    .. code-block:: cpp
 //
-//       my_tree_init(&tree);
 //       my_node_init(node);
 //
 //    Of course usually you want to split declaration and implementation of the
@@ -131,19 +129,16 @@
 //    arguments and are the most verbose. Used to build upon rbtree. For
 //    example prbtree (persistent rbtree) will use these function.
 //
-//    To use the rb_x_m functions you also need to initialize the nil pointer.
-//
 //    .. code-block:: cpp
 //
-//       tree = my_nil_ptr;
 //       rb_node_init_m(
-//           my_nil_ptr,
+//           NULL,
 //           rb_color_m,
 //           rb_parent_m,
 //           rb_left_m,
 //           rb_right_m,
-//           my_nil_ptr
-//       ); // Instead of my_tree_init in the bound functions
+//           node
+//       );
 //
 // Questions
 // =========
@@ -200,7 +195,6 @@
 #begindef rb_new_context_m(cx, type)
     typedef type cx##_type_t;
     typedef type cx##_iter_t;
-    extern cx##_type_t* cx##_nil_ptr;
 #enddef
 
 // Comparators
@@ -656,7 +650,8 @@ do {
         x = right(node);
 
     /* Remove node from the tree */
-    parent(x) = parent(node);
+    if(x != nil)
+        parent(x) = parent(node);
     if(parent(node) != nil) {
         if(y == left(parent(node)))
             left(parent(node)) = x;
@@ -731,10 +726,6 @@ do {
 #begindef rb_bind_decl_cx_m(cx, type)
     rb_new_context_m(cx, type)
     void
-    cx##_tree_init(
-            type** tree
-    );
-    void
     cx##_iter_init(
             type* tree,
             cx##_iter_t* iter,
@@ -796,23 +787,6 @@ do {
         right,
         cmp
 )
-    cx##_type_t cx##_nil_mem;
-    cx##_type_t* cx##_nil_ptr = &cx##_nil_mem;
-    void
-    cx##_tree_init(
-            type** tree
-    )
-    {
-        rb_node_init_m(
-                cx##_nil_ptr,
-                color,
-                parent,
-                left,
-                right,
-                cx##_nil_ptr
-        );
-        *tree = cx##_nil_ptr;
-    }
     void
     cx##_iter_init(
             type* tree,
@@ -822,7 +796,7 @@ do {
     {
         (void)(iter);
         rb_iter_init_m(
-            cx##_nil_ptr,
+            NULL,
             left,
             tree,
             *elem
@@ -836,7 +810,7 @@ do {
     {
         (void)(iter);
         rb_iter_next_m(
-            cx##_nil_ptr,
+            NULL,
             type,
             parent,
             left,
@@ -850,7 +824,7 @@ do {
     )
     {
         rb_node_init_m(
-                cx##_nil_ptr,
+                NULL,
                 color,
                 parent,
                 left,
@@ -866,7 +840,7 @@ do {
     {
         rb_insert_m(
             type,
-            cx##_nil_ptr,
+            NULL,
             color,
             parent,
             left,
@@ -876,9 +850,9 @@ do {
             node
         );
         return (
-            parent(node) != cx##_nil_ptr ||
-            left(node) != cx##_nil_ptr ||
-            right(node) != cx##_nil_ptr ||
+            parent(node) != NULL ||
+            left(node) != NULL ||
+            right(node) != NULL ||
             *tree == node
         );
     }
@@ -888,7 +862,7 @@ do {
             type* node
     ) rb_delete_node_m(
         type,
-        cx##_nil_ptr,
+        NULL,
         color,
         parent,
         left,
@@ -984,7 +958,7 @@ do {
         tmp
 )
 {
-    type* nil = cx##_nil_ptr;
+    type* nil = NULL;
     if(node == nil) {
         if(pathdepth < 0)
             pathdepth = depth;
@@ -1158,7 +1132,7 @@ do {
 #begindef _rb_rotate_left_tr_m(cx, tree, node)
     _rb_rotate_left_m(
         cx##_type_t,
-        cx##_nil_ptr,
+        NULL,
         rb_color_m,
         rb_parent_m,
         rb_left_m,
@@ -1193,7 +1167,7 @@ do {
 #begindef _rb_rotate_right_tr_m(cx, tree, node)
     _rb_rotate_right_m(
         cx##_type_t,
-        cx##_nil_ptr,
+        NULL,
         rb_color_m,
         rb_parent_m,
         rb_left_m,
@@ -1314,7 +1288,7 @@ do {
 )
 {
     y = right(parent(parent(x)));
-    if(rb_is_red_m(color(y))) {
+    if(y != nil && rb_is_red_m(color(y))) {
         rb_make_black_m(color(parent(x)));
         rb_make_black_m(color(y));
         rb_make_red_m(color(parent(parent(x))));
diff --git a/src/test_delete.c b/src/test_delete.c
index 4449388..c17df56 100644
--- a/src/test_delete.c
+++ b/src/test_delete.c
@@ -10,8 +10,7 @@ test_delete(int len, int* nodes, int* sorted, int count, int sum, int do_sum)
     int i = 0;
     node_t* mnodes = malloc(len * sizeof(node_t));
     do {
-        node_t* tree;
-        my_tree_init(&tree);
+        node_t* tree = NULL;
         node_t* node = NULL;
         for(i = 0; i < len; i++) {
             node = &mnodes[i];
@@ -75,8 +74,7 @@ test_switch(int len, int* nodes, int sum, int do_sum)
     do {
         int value;
         int i;
-        node_t* tree;
-        my_tree_init(&tree);
+        node_t* tree = NULL;
         node_t* node = NULL;
         node_t* x;
         node_t* y;
diff --git a/src/test_insert.c b/src/test_insert.c
index 8dcb0ad..9d8b07b 100644
--- a/src/test_insert.c
+++ b/src/test_insert.c
@@ -6,8 +6,7 @@ int
 test_insert_static(void)
 {
     node_t mnodes[5];
-    node_t* tree;
-    my_tree_init(&tree);
+    node_t* tree = NULL;
     node_t* node;
     for(int i = 0; i < 5; i++) {
         node = &mnodes[i];
@@ -40,7 +39,7 @@ test_insert_static(void)
     for(int i = 0; i < 2; i++) {
         my_node_init(tree);
         my_node_init(node);
-        my_tree_init(&tree);
+        tree = NULL;
         my_insert(&tree, &mnodes[0]);
         my_insert(&tree, node);
         TA(
@@ -55,7 +54,7 @@ test_insert_static(void)
 
     my_node_init(tree);
     my_node_init(node);
-    my_tree_init(&tree);
+    tree = NULL;
     my_insert(&tree, &mnodes[0]);
     rb_value_m(node) = -1;
     my_insert(&tree, node);
@@ -71,7 +70,7 @@ test_insert_static(void)
     my_node_init(tree);
     my_node_init(node);
     rb_value_m(node) = 1;
-    my_tree_init(&tree);
+    tree = NULL;
     my_insert(&tree, &mnodes[1]);
     my_insert(&tree, &mnodes[0]);
     my_insert(&tree, &mnodes[2]);
@@ -283,8 +282,7 @@ test_insert(int len, int* nodes, int* sorted, int count, int sum, int do_sum)
     int ret = 0;
     node_t* mnodes = malloc(len * sizeof(node_t));
     do {
-        node_t* tree;
-        my_tree_init(&tree);
+        node_t* tree = NULL;
         node_t* node;
         for(int i = 0; i < len; i++) {
             node = &mnodes[i];
diff --git a/src/testing.rg.h b/src/testing.rg.h
index ac6c79e..8ecf3e7 100644
--- a/src/testing.rg.h
+++ b/src/testing.rg.h
@@ -57,6 +57,7 @@ struct node_s {
 };
 
 
+#define my_nil_ptr NULL
 #define my_cmp_m(x, y) rb_value_cmp_m(x, y)
 rb_bind_decl_m(my, node_t)
 
