#!/usr/bin/env python3

"""Create a c file from rgc file."""

import codecs
import sys
import re

_state = 0
_macro  = []
_i = 0
_begindef = re.compile("(^#\s*)(begindef)(.*$)")
_enddef = re.compile("^#\s*enddef.*$")


class State(object):
    """State."""

    C   = 0
    DEF = 1


cc = sys.argv[1]
file_ = sys.argv[2]
outfile = sys.argv[3]
with codecs.open(file_, encoding="UTF-8") as in_:
    with codecs.open(outfile, mode="w", encoding="UTF-8") as out:
        for i, line in enumerate(in_.readlines()):
            line = line.rstrip("\n")
            space = len(line) - len(line.lstrip())
            if _state == State.C:
                bd = _begindef.match(line)
                if bd:
                    _state = State.DEF
                    _macro = [line]
                    line = "%sdefine%s" % (bd.group(1), bd.group(3))
                    line = "%s \\" % line
            elif _state == State.DEF:
                _macro.append(line)
                stripline = line.strip()
                if _begindef.match(stripline):
                    print("%s:%d:%d: error: nested #begindef" % (
                        file_,
                        i + 1,
                        len(line) - 1
                    ))
                    sys.exit(1)
                elif _enddef.match(stripline):
                    _state = State.C
                    line = ""
                else:
                    line = "%s \\" % line
            else:
                print("%s:%d:%d: error: syntax error" % (
                    file_,
                    i + 1,
                    len(line) - 1
                ))
                sys.exit(1)
            out.write("%s\n" % line)
